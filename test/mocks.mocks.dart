// Mocks generated by Mockito 5.4.2 from annotations
// in carbon_flutter/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:carbon_flutter/app/clients/github_api_client.dart' as _i3;
import 'package:carbon_flutter/app/clients/http_client.dart' as _i2;
import 'package:carbon_flutter/domain/github/commits.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpClient_0 extends _i1.SmartFake implements _i2.HttpClient {
  _FakeHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubApiClient extends _i1.Mock implements _i3.GithubApiClient {
  @override
  _i2.HttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.HttpClient);
  @override
  String get githubApiHost => (super.noSuchMethod(
        Invocation.getter(#githubApiHost),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.Future<List<_i5.Commit>> loadCommits(
    String? user,
    String? repository,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCommits,
          [
            user,
            repository,
          ],
        ),
        returnValue: _i4.Future<List<_i5.Commit>>.value(<_i5.Commit>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Commit>>.value(<_i5.Commit>[]),
      ) as _i4.Future<List<_i5.Commit>>);
}
